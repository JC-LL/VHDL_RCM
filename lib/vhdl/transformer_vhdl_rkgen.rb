# ============================================================
# This code was generated by rkgen utility.
# DO NOT MODIFY !
# ============================================================
 
module VHDL
 
  class Transformer
    def transform ast
      puts "transform ast #{ast}"
      ast.accept(self)
    end
     
    def visitDesignUnit(designunit_,args=nil)
      new_elements=designunit_.elements.map{|element_| element_.accept(self,args)}
      DesignUnit.new(new_elements)
    end
     
    def visitEntity(entity_,args=nil)
      new_generics=entity_.generics.map{|generic_| generic_.accept(self,args)}
      new_name=entity_.name.accept(self,args)
      new_ports=entity_.ports.map{|port_| port_.accept(self,args)}
      Entity.new(new_generics,new_name,new_ports)
    end
     
    def visitGeneric(generic_,args=nil)
      new_name=generic_.name.accept(self,args)
      new_type=generic_.type.accept(self,args)
      new_init=generic_.init.accept(self,args)
      Generic.new(new_name,new_type,new_init)
    end
     
    def visitPort(port_,args=nil)
      new_name=port_.name.accept(self,args)
      new_direction=port_.direction.accept(self,args)
      new_type=port_.type.accept(self,args)
      Port.new(new_name,new_direction,new_type)
    end
     
    def visitArchitecture(architecture_,args=nil)
      new_name=architecture_.name.accept(self,args)
      new_entity_name=architecture_.entity_name.accept(self,args)
      new_decls=architecture_.decls.map{|decl_| decl_.accept(self,args)}
      new_body=architecture_.body.accept(self,args)
      Architecture.new(new_name,new_entity_name,new_decls,new_body)
    end
     
    def visitSignal(signal_,args=nil)
      new_name=signal_.name.accept(self,args)
      new_type=signal_.type.accept(self,args)
      new_init=signal_.init.accept(self,args)
      Signal.new(new_name,new_type,new_init)
    end
     
    def visitConstant(constant_,args=nil)
      new_name=constant_.name.accept(self,args)
      new_type=constant_.type.accept(self,args)
      new_expr=constant_.expr.accept(self,args)
      Constant.new(new_name,new_type,new_expr)
    end
     
    def visitBody(body_,args=nil)
      new_stmts=body_.stmts.map{|stmt_| stmt_.accept(self,args)}
      Body.new(new_stmts)
    end
     
    def visitSigAssign(sigassign_,args=nil)
      new_lhs=sigassign_.lhs.accept(self,args)
      new_rhs=sigassign_.rhs.accept(self,args)
      SigAssign.new(new_lhs,new_rhs)
    end
     
    def visitInstanciation(instanciation_,args=nil)
      new_iname=instanciation_.iname.accept(self,args)
      new_ename=instanciation_.ename.accept(self,args)
      new_aname=instanciation_.aname.accept(self,args)
      new_genericmap=instanciation_.genericMap.accept(self,args)
      new_portmap=instanciation_.portMap.accept(self,args)
      Instanciation.new(new_iname,new_ename,new_aname,new_genericmap,new_portmap)
    end
  end # transformer
end # VHDL
